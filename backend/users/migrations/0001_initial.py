# Generated by Django 5.2.2 on 2025-06-13 12:06

import django.db.models.deletion
import django.utils.timezone
import django_tenants.postgresql_backend.base
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tenant",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "schema_name",
                    models.CharField(
                        db_index=True,
                        max_length=63,
                        unique=True,
                        validators=[
                            django_tenants.postgresql_backend.base._check_schema_name
                        ],
                    ),
                ),
                (
                    "custom_tenant_id",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("full_name", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "hospital_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "mobile_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("username", models.CharField(blank=True, max_length=50, null=True)),
                ("email", models.CharField(blank=True, max_length=100, null=True)),
                ("password", models.CharField(blank=True, max_length=50, null=True)),
                ("created_at", models.DateField(auto_now_add=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Domain",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "domain",
                    models.CharField(db_index=True, max_length=253, unique=True),
                ),
                ("is_primary", models.BooleanField(db_index=True, default=True)),
                (
                    "custom_domain_url",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("browse", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="domains",
                        to="users.tenant",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("username", models.CharField(blank=True, max_length=255, null=True)),
                ("is_tenant_admin", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "profile_image",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("pan_image", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "aadhar_front_image",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "aadhar_back_image",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "Users",
                "unique_together": {("email", "tenant")},
            },
        ),
    ]
